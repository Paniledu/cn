#include <stdio.h>
#define INF 999
void printPath(int prev[], int j) {
    if (prev[j] != -1) printPath(prev, prev[j]);
    printf("%d ", j + 1);
}
int main() {
    int n, start;
    printf("Enter size of matrix: ");
    scanf("%d", &n);
    int g[n][n], dist[n], prev[n], visit[n];
    for (int i = 0; i < n; i++) for (int j = 0; j < n; j++) 
    scanf("%d", &g[i][j]);
    printf("Enter starting node: ");
    scanf("%d", &start);
    for (int i = 0; i < n; i++) dist[i] = INF, prev[i] = -1, visit[i] = 0;
    dist[start] = 0;
    for (int c = 0; c < n; c++) {
        int u = -1;
        for (int i = 0; i < n; i++) if (!visit[i] && (u == -1 || dist[i] < dist[u])) u = i;
        if (dist[u] == INF) break;
        visit[u] = 1;
        for (int v = 0; v < n; v++) if (g[u][v] && dist[v] > dist[u] + g[u][v]) {
            dist[v] = dist[u] + g[u][v];
            prev[v] = u;
        }
    }
    for (int i = 0; i < n; i++) {
        if (dist[i] == INF) printf("No path to %d\n", i + 1);
        else { 
            printf("To %d: %d, Path: ", i + 1, dist[i]);
            printPath(prev, i);
            printf("\n");
        }
    }
    return 0;
}
